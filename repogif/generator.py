import os
import tempfile
import subprocess
import sys
import glob
import shutil
import imageio


def generate_repo_gif(repo_name="repogif", stars=123, forks=45, out="repo.gif"):
    """
    Generate a GitHub repository header GIF using a web-based approach with Puppeteer.
    
    This function uses a Node.js script with Puppeteer to capture frames of an animated
    GitHub repository header, then compiles them into a GIF using imageio.
    
    Args:
        repo_name (str): Name of the repository
        stars (int/str): Number of stars to display
        forks (int/str): Number of forks to display
        out (str): Output path for the GIF
        
    Returns:
        None: The GIF is saved to the specified path
        
    Raises:
        RuntimeError: If Node.js or Puppeteer is not available
    """
    # Check for Node.js
    try:
        node_version = subprocess.run(
            ["node", "--version"],
            capture_output=True,
            text=True,
            check=True
        )
        print(f"Using Node.js {node_version.stdout.strip()}")
    except (subprocess.SubprocessError, FileNotFoundError):
        raise RuntimeError(
            "Node.js is not installed or not in PATH. Please install Node.js to use this feature."
        )
        
    # Check for puppeteer
    try:
        check_puppeteer = subprocess.run(
            ["node", "-e", "require('puppeteer')"],
            capture_output=True,
            text=True
        )
        if check_puppeteer.returncode != 0:
            raise RuntimeError(
                "Puppeteer is not installed. Please run 'npm install puppeteer yargs' to install required dependencies."
            )
    except subprocess.SubprocessError:
        raise RuntimeError(
            "Failed to check for Puppeteer. Please make sure Node.js is properly installed and run 'npm install puppeteer yargs'."
        )
    
    # Create temporary directory for frames
    with tempfile.TemporaryDirectory() as temp_dir:
        try:
            # Get the path to the puppeteer script
            script_path = os.path.join(os.path.dirname(__file__), "puppeteer_capture.js")
            
            # Run the puppeteer script to generate frames
            cmd = [
                "node",
                script_path,
                "--repo", str(repo_name),
                "--stars", str(stars),
                "--forks", str(forks),
                "--output", temp_dir,
                "--frames", "20"  # Default number of frames
            ]
            
            print("Capturing frames with Puppeteer...")
            subprocess.run(cmd, check=True)
            
            # Get all frame files in the correct order
            frame_files = sorted(glob.glob(os.path.join(temp_dir, "frame_*.png")))
            
            if not frame_files:
                raise RuntimeError("No frames were generated by the Puppeteer script")
            
            # Create GIF from frames
            print(f"Creating GIF from {len(frame_files)} frames...")
            with imageio.get_writer(out, mode='I', duration=0.2) as writer:
                for frame_file in frame_files:
                    image = imageio.imread(frame_file)
                    writer.append_data(image)
            
            print(f"âœ… Saved {out}")
            
        except subprocess.SubprocessError as e:
            error_msg = str(e)
            if "Cannot find module 'puppeteer'" in error_msg or "Cannot find module 'yargs'" in error_msg:
                raise RuntimeError(
                    "Required Node.js modules are missing. Please run 'npm install puppeteer yargs' in the project directory."
                )
            else:
                raise RuntimeError(f"Error running Puppeteer script: {e}")
        except Exception as e:
            raise RuntimeError(f"Error generating GIF: {e}")